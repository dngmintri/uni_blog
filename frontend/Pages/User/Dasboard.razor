@page "/dashboard"
@using Blazorise
@using Blazorise.Icons.FontAwesome
@using frontend.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IAuthService authService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager

<link href="css/dashboard.css" rel="stylesheet" />

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div id="container">
        <div id="header">
            <div id="logo"><h2>Uni_Blog</h2></div>

            <Dropdown>
                <DropdownToggle>
                    @if (!string.IsNullOrEmpty(currentUser?.AvatarUrl))
                    {
                        <img src="@currentUser.AvatarUrl" style="width:40px;height:40px;border-radius:50%;cursor:pointer">
                    }
                    else
                    {
                        <div class="d-flex align-items-center justify-content-center bg-light rounded-circle" style="width:40px;height:40px;cursor:pointer">
                            <Blazorise.Icons.FontAwesome.Icon Name="IconName.User" Size="IconSize.Small" Class="text-muted" />
                        </div>
                    }
                </DropdownToggle>
                <DropdownMenu>
                    <DropdownItem Clicked="GoToProfile">Xem trang cá nhân</DropdownItem>
                    <DropdownItem>Cài đặt</DropdownItem>
                    <DropdownItem Clicked="Logout">Đăng xuất</DropdownItem>
                </DropdownMenu>
            </Dropdown>
        </div>

        <div id="content">
            <div id="post-blog">
                <div class="d-flex justify-content-between align-items-center p-3 bg-light border-bottom">
                    <div class="d-flex align-items-center">
                        @if (!string.IsNullOrEmpty(currentUser?.AvatarUrl))
                        {
                            <img src="@currentUser.AvatarUrl" style="width:40px;height:40px;border-radius:50%;cursor:pointer">
                        }
                        else
                        {
                            <div class="d-flex align-items-center justify-content-center bg-light rounded-circle" style="width:40px;height:40px;cursor:pointer">
                                <Blazorise.Icons.FontAwesome.Icon Name="IconName.User" Size="IconSize.Small" Class="text-muted" />
                            </div>
                        }
                        <div class="ms-2 flex-grow-1">
                            <h6 class="mb-1">@(currentUser?.FullName ?? "User")</h6>
                            <InputText Placeholder="bạn đang nghĩ gì thế?" Class="w-100" @onfocus="OpenCreateModal" />
                        </div>
                    </div>
                    <Button Color="Color.Primary" Size="Size.Small" Clicked="OpenCreateModal">Đăng bài</Button>
                </div>
            </div>
            
            <div class="post-container">
                <div class="post-header d-flex align-items-start mb-3">
                    <img src="images/siu.jpg" alt="User Avatar" class="rounded-circle me-3" style="width: 50px; height: 50px;" />
                    <div class="flex-grow-1">
                        <div class="d-flex align-items-center mb-1">
                            <h6 class="mb-0 me-2">Nhà thơ Binz</h6>
                        </div>
                        <small class="text-muted">18 tháng 10 lúc 11:00</small>
                    </div>
                </div>

                <div class="post-content mb-3">
                    <p class="mb-2">Cục đồi ngẩn làm, yêu ai<br>thì yêu điệncuồng lên.</p>
                    <p>Đúng ăn cá, ngả thiu<br>bàn bàn thì nhậu.</p>
                </div>

                <div class="post-media d-flex flex-wrap gap-2 mb-3">
                    <!-- Sticker-like images; replace src with actual URLs -->
                    <img src="images/siu.jpg" alt="Sticker 1" class="sticker-img rounded" />
                    <img src="images/siu.jpg" alt="Sticker 2" class="sticker-img rounded" />
                    <img src="images/siu.jpg" alt="Sticker 3" class="sticker-img rounded" />
                    <!-- Add more as needed -->
                </div>

                <div class="post-actions d-flex justify-content-start mb-3">
                    <!-- Only comment button -->
                    <Button Color="Color.Secondary" Size="Size.Small" IconName="Icons.FontAwesome.Solid.Comment" Class="me-2" Clicked="OpenPostModal">
                        Bình luận
                    </Button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Modal tạo bài viết mới -->
    <Modal @ref="createModalRef" Visible="@IsCreateModalOpen" VisibleChanged="OnCreateVisibleChanged">
        <ModalContent Centered="true">
            <ModalHeader>
                <ModalTitle>Tạo bài viết mới</ModalTitle>
                <CloseButton Clicked="CloseCreateModal" />
            </ModalHeader>
            <ModalBody>
                <div class="mb-3">
                    <label class="form-label">Nội dung</label>
                    <TextEdit Placeholder="Hãy chia sẻ suy nghĩ của bạn..." Multiline="true" Rows="4" Class="w-100" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Đăng ảnh</label>
                    <FileEdit Multiple="true" Accept=".jpg,.jpeg,.png,.gif" Class="w-100" />
                    <small class="text-muted">Chọn ảnh để đính kèm (JPG, PNG, GIF)</small>
                </div>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="CloseCreateModal">Hủy</Button>
                <Button Color="Color.Primary" Size="Size.Small" Clicked="PostArticle">Đăng bài</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

    <!-- Modal chi tiết bài viết và bình luận -->
    <Modal @ref="postModalRef" Visible="@IsPostModalOpen" VisibleChanged="OnPostVisibleChanged" Size="ModalSize.Large">
        <ModalContent Centered="true" Style="max-height: 80vh;">
            <ModalHeader>
                <ModalTitle>Bình luận bài viết</ModalTitle>
                <CloseButton Clicked="ClosePostModal" />
            </ModalHeader>
            <ModalBody Style="display: flex; flex-direction: column; max-height: calc(80vh - 120px);">
                <div style="flex: 1; overflow-y: auto;">
                    <!-- Post details -->
                    <div class="post-detail mb-4">
                        <div class="post-header d-flex align-items-start mb-3">
                            <img src="images/siu.jpg" alt="User Avatar" class="rounded-circle me-3" style="width: 50px; height: 50px;" />
                            <div class="flex-grow-1">
                                <div class="d-flex align-items-center mb-1">
                                    <h6 class="mb-0 me-2">Nhà thơ Binz</h6>
                                </div>
                                <small class="text-muted">18 tháng 10 lúc 11:00</small>
                            </div>
                        </div>

                        <div class="post-content mb-3">
                            <p class="mb-2">Cục đồi ngẩn làm, yêu ai<br>thì yêu điệncuồng lên.</p>
                            <p>Đúng ăn cá, ngả thiu<br>bàn bàn thì nhậu.</p>
                        </div>

                        <div class="post-media mb-3">
                            @if (postImages.Count == 1)
                            {
                                <img src="@postImages[0]" alt="Full Image" class="full-image rounded" style="width: 100%; height: auto; max-height: 500px; object-fit: cover;" />
                            }
                            else if (postImages.Count == 2)
                            {
                                <div class="d-flex gap-2 w-100">
                                    @foreach (var img in postImages)
                                    {
                                        <img src="@img" alt="Image" class="two-image rounded" style="flex: 1; height: auto; max-height: 400px; object-fit: cover;" />
                                    }
                                </div>
                            }
                            else if (postImages.Count == 3)
                            {
                                <div class="d-flex flex-wrap gap-2 w-100">
                                    <img src="@postImages[0]" alt="Main Image" class="three-main-image rounded" style="width: 65%; height: auto; max-height: 400px; object-fit: cover;" />
                                    <div class="d-flex flex-column gap-2" style="width: 33%;">
                                        @for (int i = 1; i < postImages.Count && i < 3; i++)
                                        {
                                            <img src="@postImages[i]" alt="Side Image" class="three-side-image rounded" style="flex: 1; height: auto; max-height: 200px; object-fit: cover;" />
                                        }
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="row g-2 w-100">
                                    @foreach (var img in postImages)
                                    {
                                        <div class="col-6">
                                            <img src="@img" alt="Grid Image" class="grid-image rounded" style="width: 100%; height: auto; max-height: 250px; object-fit: cover;" />
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Existing comments (hardcoded samples) -->
                    <div class="comments-section mb-3">
                        <h6 class="mb-2">Bình luận (2)</h6>
                        <div class="comment-item d-flex align-items-start mb-2">
                            <img src="images/siu.jpg" alt="Commenter Avatar" class="rounded-circle me-2 mt-1" style="width: 30px; height: 30px;" />
                            <div class="flex-grow-1">
                                <small class="fw-bold">User1</small>
                                <p class="mb-0 small">Comment text here... Hay quá!</p>
                                <small class="text-muted">1 giờ trước</small>
                            </div>
                        </div>
                        <div class="comment-item d-flex align-items-start mb-2">
                            <img src="images/siu.jpg" alt="Commenter Avatar" class="rounded-circle me-2 mt-1" style="width: 30px; height: 30px;" />
                            <div class="flex-grow-1">
                                <small class="fw-bold">User2</small>
                                <p class="mb-0 small">Thú vị thật sự!</p>
                                <small class="text-muted">30 phút trước</small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Input for new comment - fixed at bottom -->
                <div class="input-group" style="flex-shrink: 0; padding: 10px; border-top: 1px solid #eee; background-color: #f8f9fa;">
                    <InputText @bind-Value="newPostContent" Placeholder="bạn đang nghĩ gì thế?" Class="w-100" />
                    <Button Color="Color.Primary" Size="Size.Small">Gửi</Button>
                </div>
            </ModalBody>
        </ModalContent>
    </Modal>
}

<style>
    .post-container {
        max-width: 600px;
        margin: 2rem auto;
        background: #fff;
        border-radius: 12px;
        padding: 1rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        font-family: 'Segoe UI', sans-serif;
    }

    .post-content p {
        line-height: 1.4;
        font-size: 1rem;
        margin-bottom: 0.5rem;
    }

    .sticker-img {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border: 1px solid #eee;
    }

    .comment-item {
        background: #f8f9fa;
        padding: 0.5rem;
        border-radius: 8px;
    }

    .post-detail {
        border-bottom: 1px solid #eee;
        padding-bottom: 1rem;
    }

    .two-image {
        border: 1px solid #eee;
    }

    .three-main-image {
        border: 1px solid #eee;
    }

    .three-side-image {
        border: 1px solid #eee;
    }

    .grid-image {
        border: 1px solid #eee;
    }
</style>

@code {
    private Modal createModalRef { get; set; } = default!;
    private Modal postModalRef { get; set; } = default!;
    private bool IsCreateModalOpen { get; set; } = false;
    private bool IsPostModalOpen { get; set; } = false;
    private string newPostContent { get; set; } = "";
    private List<string> postImages { get; set; } = new() { "images/siu.jpg", "images/siu.jpg", "images/siu.jpg" }; // Example with 3 images; adjust count for testing
    private AuthResponse? currentUser;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            currentUser = await authService.GetCurrentUserAsync();
            if (currentUser == null)
            {
                // Nếu không có thông tin user, redirect về login
                navigationManager.NavigateTo("/login");
                return;
            }

            // Convert relative avatar URL to full URL if needed
            if (!string.IsNullOrEmpty(currentUser.AvatarUrl))
            {
                Console.WriteLine($"Dashboard original avatar URL: {currentUser.AvatarUrl}");
                if (currentUser.AvatarUrl.StartsWith("/"))
                {
                    currentUser.AvatarUrl = $"http://localhost:5000{currentUser.AvatarUrl}";
                    Console.WriteLine($"Dashboard converted avatar URL: {currentUser.AvatarUrl}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user: {ex.Message}");
            navigationManager.NavigateTo("/login");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task Logout()
    {
        await authService.LogoutAsync();
        navigationManager.NavigateTo("/login");
    }

    private Task OpenCreateModal()
    {
        IsCreateModalOpen = true;
        return Task.CompletedTask;
    }

    private Task OnCreateVisibleChanged(bool visible)
    {
        IsCreateModalOpen = visible;
        return Task.CompletedTask;
    }

    private Task CloseCreateModal()
    {
        return createModalRef.Hide();
    }

    private Task PostArticle()
    {
        // TODO: Xử lý đăng bài sau
        return CloseCreateModal();
    }

    private Task OpenPostModal()
    {
        IsPostModalOpen = true;
        return Task.CompletedTask;
    }

    private Task OnPostVisibleChanged(bool visible)
    {
        IsPostModalOpen = visible;
        return Task.CompletedTask;
    }

    private Task ClosePostModal()
    {
        return postModalRef.Hide();
    }

    private void GoToProfile()
    {
        navigationManager.NavigateTo("/profile");
    }
}