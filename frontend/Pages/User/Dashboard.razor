@page "/dashboard"
@using Blazorise
@using Microsoft.AspNetCore.Components.Forms
@using Blazorise.Icons.FontAwesome
@using frontend.Services
@using frontend.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject IAuthService authService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager
@inject PageTitleService PageTitleService
@inject HttpClient Http
@inject IPostService postService
@inject IUploadService uploadService
@inject CommentService commentService
@inject NavigationManager Navigation
<link href="css/dashboard.css" rel="stylesheet" />

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 50vh;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (currentUser == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 50vh;">
        <div class="alert alert-warning">
            <h4>Không thể tải thông tin người dùng</h4>
            <p>Vui lòng đăng nhập lại.</p>
            <a href="/login" class="btn btn-primary">Đăng nhập</a>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2>Dashboard</h2>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                @if (!string.IsNullOrEmpty(currentUser?.AvatarUrl))
                                {
                                    <img src="@currentUser.AvatarUrl" style="width:40px;height:40px;border-radius:50%;cursor:pointer">
                                }
                                else
                                {
                                    <div class="d-flex align-items-center justify-content-center bg-light rounded-circle" style="width:40px;height:40px;cursor:pointer">
                                        <Blazorise.Icons.FontAwesome.Icon Name="IconName.User" Size="IconSize.Small" Class="text-muted" />
                                    </div>
                                }
                                <div class="ms-2 flex-grow-1">
                                    <h6 class="mb-1">@(currentUser?.FullName ?? "User")</h6>
                                    <p>Mau chia sẻ những điều thú vị nào</p>
                                </div>
                            </div>
                            <Button Color="Color.Primary" Size="Size.Small" Clicked="OpenCreateModal">Đăng bài</Button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row">
            <div class="col-12">
                @foreach (var post in posts)
                {
                    <div class="post-container mb-4">
                        <div class="post-header d-flex align-items-start mb-3">
                            @if (!string.IsNullOrEmpty(post.AuthorAvatarUrl))
                            {
                                <img src="@post.AuthorAvatarUrl" 
                                    class="rounded-circle me-3" style="width: 50px; height: 50px;" />
                            }
                            else
                            {
                                <div class="d-flex align-items-center justify-content-center bg-light rounded-circle me-3" style="width: 50px; height: 50px;">
                                    <Blazorise.Icons.FontAwesome.Icon Name="IconName.User" Size="IconSize.Small" Class="text-muted" />
                                </div>
                            }
                            <div class="flex-grow-1">
                                <div class="d-flex align-items-center mb-1">
                                    <h6 class="mb-0 me-2">@post.AuthorName</h6>
                                </div>
                                <small class="text-muted">@post.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                            </div>
                        </div>

                        <div class="post-content mb-3">
                            @if (!string.IsNullOrEmpty(post.Title))
                            {
                                <h5 class="mb-2 fw-bold">@post.Title</h5>
                            }
                            <div style="white-space: pre-line; line-height: 1.4; font-size: 1rem;">@post.Content</div>  <!-- Thay <p> bằng div này -->
                        </div>

                        @if (!string.IsNullOrEmpty(post.ImageUrl))
                        {
                            <div class="post-media mb-3">
                                <img src="@post.ImageUrl" class="rounded cursor-pointer" style="width:100%; max-height:300px; object-fit:cover;"
                                    @onclick="() => OpenImageModal(post.ImageUrl)" />
                            </div>
                        }

                        <div class="post-actions d-flex justify-content-start mb-3">
                            <Button Color="Color.Secondary" Size="Size.Small" IconName="Icons.FontAwesome.Solid.Comment" Clicked="() => OpenPostModal(post)">
                                Bình luận
                            </Button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <!-- Modal tạo bài viết mới -->
    <Modal @ref="createModalRef" Visible="@IsCreateModalOpen" VisibleChanged="OnCreateVisibleChanged">
        <ModalContent Centered="true">
            <ModalHeader>
                <ModalTitle>Tạo bài viết mới</ModalTitle>
                <CloseButton Clicked="CloseCreateModal" />
            </ModalHeader>
            <ModalBody>
                <div class="mb-3">
                    <label class="form-label">Tiêu đề</label>
                    <TextEdit @bind-Text="Title" Placeholder="Tiêu đề bài viết" Class="w-100" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Nội dung</label>
                    <TextEdit @bind-Text="Content" Placeholder="Hãy chia sẻ suy nghĩ của bạn..." Multiline="true" Rows="4" Class="w-100" Style="white-space: pre-wrap; overflow-y: auto;"/>
                </div>
                <div class="mb-3">
                    <label class="form-label">Đăng ảnh</label>
                    <FileEdit Multiple="false" Accept=".jpg,.jpeg,.png,.gif" Class="w-100" Changed="OnFileSelected"/>
                    <small class="text-muted">Chọn 1 ảnh để đính kèm (JPG, PNG, GIF)</small>
                </div>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Size="Size.Small" Clicked="CloseCreateModal">Hủy</Button>
                <Button Color="Color.Primary" Size="Size.Small" Clicked="PostArticle" >Đăng bài</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

    <!-- Modal chi tiết bài viết và bình luận -->
    <Modal @ref="postModalRef" Visible="@IsPostModalOpen" VisibleChanged="OnPostVisibleChanged" Size="ModalSize.Large">
        <ModalContent Centered="true" Style="max-height: 80vh;">
            <ModalHeader>
                <ModalTitle>Bình luận bài viết</ModalTitle>
                <CloseButton Clicked="ClosePostModal" />
            </ModalHeader>
            <ModalBody Style="display: flex; flex-direction: column; max-height: calc(80vh - 120px);">
                <div style="flex: 1; overflow-y: auto;">
                    <!-- Post details -->
                    <div class="post-detail mb-4">
                        <div class="post-header d-flex align-items-start mb-3">
                            @if (!string.IsNullOrEmpty(selectedPost?.AuthorAvatarUrl))
                            {
                                <img src="@selectedPost.AuthorAvatarUrl" 
                                    class="rounded-circle me-3" style="width: 50px; height: 50px;" />
                            }
                            else
                            {
                                <div class="d-flex align-items-center justify-content-center bg-light rounded-circle me-3" style="width: 50px; height: 50px;">
                                    <Blazorise.Icons.FontAwesome.Icon Name="IconName.User" Size="IconSize.Small" Class="text-muted" />
                                </div>
                            }
                            <div class="flex-grow-1">
                                <div class="d-flex align-items-center mb-1">
                                    <h6 class="mb-0 me-2">@(selectedPost?.AuthorName ?? "Unknown User")</h6>
                                </div>
                                <small class="text-muted">@(selectedPost?.CreatedAt.ToString("dd/MM/yyyy HH:mm") ?? "Unknown Date")</small>
                            </div>
                        </div>

                        <div class="post-content mb-3">
                            @if (!string.IsNullOrEmpty(selectedPost?.Title))
                            {
                                <h5 class="mb-2 fw-bold">@selectedPost.Title</h5>
                            }
                            <div style="white-space: pre-line; line-height: 1.4;">@(selectedPost?.Content ?? "")</div>  <!-- Thay <p> -->
                        </div>

                        @if (!string.IsNullOrEmpty(selectedPost?.ImageUrl))
                        {
                            <div class="post-media mb-3">
                                <img src="@selectedPost.ImageUrl" 
                                     alt="Post Image" class="rounded cursor-pointer" style="width: 100%; height: auto; max-height: 500px; object-fit: cover;" 
                                     @onclick="() => OpenImageModal(selectedPost.ImageUrl)" />
                            </div>
                        }
                    </div>

                    <!-- Existing comments -->
                    <div class="comments-section mb-3">
                        <h6 class="mb-2">Bình luận (@comments.Count)</h6>
                        @foreach (var comment in comments)
                        {
                            <div class="comment-item d-flex align-items-start mb-2">
                                @if (!string.IsNullOrEmpty(comment.AuthorAvatarUrl))
                                {
                                    <img src="@comment.AuthorAvatarUrl" alt="Commenter Avatar" class="rounded-circle me-2 mt-1" style="width: 30px; height: 30px;" />
                                }
                                else
                                {
                                    <div class="d-flex align-items-center justify-content-center bg-light rounded-circle me-2 mt-1" style="width: 30px; height: 30px;">
                                        <Blazorise.Icons.FontAwesome.Icon Name="IconName.User" Size="IconSize.ExtraSmall" Class="text-muted" />
                                    </div>
                                }
                                <div class="flex-grow-1">
                                    <small class="fw-bold">@comment.AuthorName</small>
                                    <div class="mb-0 small" style="white-space: pre-line;">@comment.Content</div>
                                    <small class="text-muted">@comment.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Input for new comment - fixed at bottom -->
                <div style="flex-shrink: 0; padding: 15px; border-top: 1px solid #eee; background-color: #f8f9fa;">
                    <div class="d-flex align-items-flex-end gap-2">
                        <!-- Avatar -->
                        @if (!string.IsNullOrEmpty(currentUser?.AvatarUrl))
                        {
                            <img src="@currentUser.AvatarUrl" style="width: 32px; height: 32px; border-radius: 50%; object-fit: cover;" alt="Your Avatar" />
                        }
                        else
                        {
                            <div class="d-flex align-items-center justify-content-center bg-light rounded-circle" style="width: 32px; height: 32px; flex-shrink: 0;">
                                <Blazorise.Icons.FontAwesome.Icon Name="IconName.User" Size="IconSize.Small" Class="text-muted" />
                            </div>
                        }

                        <!-- Input và Button -->
                        <div class="d-flex gap-2 w-100" style="align-items: flex-end;">
                            <div style="flex: 1; position: relative;">
                                <TextEdit @bind-Value="newCommentContent"
                                         Placeholder="Viết bình luận..."
                                         Class="comment-input w-100"
                                         Multiline="true"
                                         Rows="1"
                                         Style="resize: none; border: 1px solid #ddd; border-radius: 20px; padding: 10px 15px; font-size: 14px; font-family: inherit;" />
                            </div>
                            <Button Color="Color.Primary"
                                   Size="Size.Small"
                                   Class="comment-submit-btn"
                                   Clicked="SubmitComment"
                                   Style="border-radius: 50%; width: 36px; height: 36px; padding: 0; display: flex; align-items: center; justify-content: center; flex-shrink: 0;">
                                <Blazorise.Icons.FontAwesome.Icon Name="IconName.PaperPlane" />
                            </Button>
                        </div>
                    </div>
                </div>
            </ModalBody>
        </ModalContent>
    </Modal>

    <!-- Modal xem ảnh lớn -->
    <Modal @ref="imageModalRef" Visible="@IsImageModalOpen" VisibleChanged="OnImageVisibleChanged" Size="ModalSize.ExtraLarge" Centered="true">
        <ModalContent Style="background-color: rgba(0,0,0,0.95); border: none; max-width: 95vw; max-height: 95vh; position: relative;">
            <ModalBody Style="display: flex; justify-content: center; align-items: center; padding: 0; height: 90vh; position: relative;">
                @if (!string.IsNullOrEmpty(selectedImageUrl))
                {
                    <div style="position: relative; display: flex; justify-content: center; align-items: center; width: 100%; height: 100%;">
                        <img src="@selectedImageUrl" alt="Full Image" style="max-width: 90%; max-height: 90%; object-fit: contain; cursor: pointer;" @onclick="CloseImageModal" />

                        <!-- Nút đóng X -->
                        <div style="position: absolute; top: 20px; right: 20px; z-index: 1000; cursor: pointer;" @onclick="CloseImageModal">
                            <div style="width: 40px; height: 40px; background-color: rgba(255,255,255,0.3); border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 24px; color: white; font-weight: bold; transition: background-color 0.3s ease;" class="close-icon-hover">
                                ✕
                            </div>
                        </div>


                    </div>
                }
            </ModalBody>
        </ModalContent>
    </Modal>
}

<style>
    .post-container {
        background: #fff;
        border-radius: 12px;
        padding: 1rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        font-family: 'Segoe UI', sans-serif;
    }

    .post-content p {
        line-height: 1.4;
        font-size: 1rem;
        margin-bottom: 0.5rem;
    }

    .comment-item {
        background: #f8f9fa;
        padding: 0.5rem;
        border-radius: 8px;
    }

    .post-detail {
        border-bottom: 1px solid #eee;
        padding-bottom: 1rem;
    }


    .cursor-pointer {
        cursor: pointer;
    }



    .close-icon-hover:hover {
        background-color: rgba(255,255,255,0.5) !important;
    }


    .comment-input {
        transition: all 0.3s ease !important;
        background-color: white !important;
    }

    .comment-input:focus {
        border-color: #007bff !important;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25) !important;
        background-color: white !important;
    }

    .comment-submit-btn {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%) !important;
        border: none !important;
        transition: all 0.3s ease !important;
        box-shadow: 0 2px 4px rgba(0, 123, 255, 0.25) !important;
    }

    .comment-submit-btn:hover {
        background: linear-gradient(135deg, #0056b3 0%, #004085 100%) !important;
        transform: scale(1.05);
        box-shadow: 0 4px 8px rgba(0, 123, 255, 0.3) !important;
    }

    .comment-submit-btn:active {
        transform: scale(0.95);
    }
</style>

@code {
    private Modal createModalRef { get; set; } = default!;
    private Modal postModalRef { get; set; } = default!;
    private Modal imageModalRef { get; set; } = default!;
    private bool IsCreateModalOpen { get; set; } = false;
    private bool IsPostModalOpen { get; set; } = false;
    private bool IsImageModalOpen { get; set; } = false;
    private string newPostContent { get; set; } = "";
    private string selectedImageUrl { get; set; } = "";
    private int currentImageIndex { get; set; } = 0;
    private List<string> postImages { get; set; } = new(); // Removed hardcoded test images
    private AuthResponse? currentUser;
    private bool isLoading = true;
    private List<Post> posts = new();
    private Post? selectedPost; // Thêm field để lưu post hiện tại cho modal
    private List<Comment> comments = new(); // Danh sách comments cho post hiện tại
    private IFileEntry? ImageFile { get; set; }
    private string Title { get; set; } = string.Empty;
    private string Content { get; set; } = string.Empty;
    private string newCommentContent { get; set; } = string.Empty; // Nội dung comment mới
    protected override async Task OnInitializedAsync()
    {
        PageTitleService.Title = "Dashboard";
        await LoadCurrentUser();
        posts = await postService.GetAllPostsAsync();
        // Fix URL cho tất cả posts
        foreach (var post in posts)
        {
            Console.WriteLine($"Raw Post: {post.Title}");
            Console.WriteLine($"Raw Image: {post.ImageUrl}");
            
            // Nếu ImageUrl chỉ là filename (không có /uploads/posts/), rebuild
            if (!string.IsNullOrEmpty(post.ImageUrl) && !post.ImageUrl.StartsWith("/uploads/"))
            {
                string fullRelativeUrl = $"/uploads/posts/{post.ImageUrl}";
                post.ImageUrl = $"http://localhost:5000{fullRelativeUrl}";  // Thay localhost:5000 bằng base URL nếu cần
            }
            // Nếu đã có full relative (hiếm), chỉ prepend base nếu cần
            else if (!string.IsNullOrEmpty(post.ImageUrl) && post.ImageUrl.StartsWith("/") && !post.ImageUrl.StartsWith("http"))
            {
                post.ImageUrl = $"http://localhost:5000{post.ImageUrl}";
            }
                
            Console.WriteLine($"Fixed Image URL: {post.ImageUrl}");
        }
        isLoading = false;
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            currentUser = await authService.GetCurrentUserAsync();
            if (currentUser == null)
            {
                // Nếu không có thông tin user, redirect về login
                navigationManager.NavigateTo("/login");
                return;
            }

            // Convert relative avatar URL to full URL if needed
            if (!string.IsNullOrEmpty(currentUser.AvatarUrl))
            {
                Console.WriteLine($"Dashboard original avatar URL: {currentUser.AvatarUrl}");
                if (currentUser.AvatarUrl.StartsWith("/"))
                {
                    currentUser.AvatarUrl = $"http://localhost:5000{currentUser.AvatarUrl}";
                    Console.WriteLine($"Dashboard converted avatar URL: {currentUser.AvatarUrl}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user: {ex.Message}");
            navigationManager.NavigateTo("/login");
        }
    }

    private Task OpenCreateModal()
    {
        IsCreateModalOpen = true;
        return Task.CompletedTask;
    }

    private Task OnCreateVisibleChanged(bool visible)
    {
        IsCreateModalOpen = visible;
        return Task.CompletedTask;
    }

    private Task CloseCreateModal()
    {
        return createModalRef.Hide();
    }

    private async Task PostArticle()
    {
        string? imageUrl = null;

        // Upload ảnh nếu có chọn
        if (ImageFile != null)
        {
            Console.WriteLine("Uploading image...");
            imageUrl = await uploadService.UploadImageAsync(ImageFile);
            Console.WriteLine($"Uploaded image URL: {imageUrl}");
        }
        Console.WriteLine($"Uploaded image URL: {imageUrl}");

        var post = new PostCreateRequest
        {
            Title = Title,
            Content = Content,
            ImageUrl = imageUrl
        };

        var result = await postService.CreatePostAsync(post);

        if (result)
        {
            Console.WriteLine("Đăng bài thành công!");
            Title = "";  // Clear
            Content = "";  // Clear
            ImageFile = null;  // Clear file
            
            Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
        }
        else
        {
            // TODO: Show error toast/message
            Console.WriteLine("Đăng bài thất bại!");
        }

        await CloseCreateModal();
    }

    //hàm lấy ảnh lưu vào biến
    private void OnFileSelected(FileChangedEventArgs e)
    {
        // Lấy file đầu tiên mà user chọn
        ImageFile = e.Files.FirstOrDefault();
    }

    private async Task OpenPostModal(Post post)
    {
        selectedPost = post;  // Lưu post để dùng trong modal
        comments = await commentService.GetCommentsByPostAsync(post.PostId); // Load comments
        IsPostModalOpen = true;
    }

    private Task OnPostVisibleChanged(bool visible)
    {
        IsPostModalOpen = visible;
        return Task.CompletedTask;
    }

    private Task ClosePostModal()
    {
        comments.Clear(); // Clear comments khi đóng modal
        newCommentContent = string.Empty; // Clear comment input
        return postModalRef.Hide();
    }

    private async Task OpenImageModal(string imageUrl)
    {
        if (string.IsNullOrEmpty(imageUrl)) return;

        selectedImageUrl = imageUrl;
        IsImageModalOpen = true;

        StateHasChanged();

        // Chờ một chút rồi mở modal
        await Task.Delay(100);
        if (imageModalRef != null)
        {
            await imageModalRef.Show();
        }
    }


    private Task OnImageVisibleChanged(bool visible)
    {
        IsImageModalOpen = visible;
        if (!visible)
        {
            selectedImageUrl = "";
            currentImageIndex = 0;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    private Task CloseImageModal()
    {
        IsImageModalOpen = false;
        selectedImageUrl = "";
        currentImageIndex = 0;
        StateHasChanged();
        return Task.CompletedTask;
    }


    private async Task SubmitComment()
    {
        if (string.IsNullOrWhiteSpace(newCommentContent) || selectedPost == null)
            return;

        try
        {
            var request = new CreateCommentRequest
            {
                Content = newCommentContent.Trim()
            };

            var newComment = await commentService.CreateCommentAsync(selectedPost.PostId, request);
            if (newComment != null)
            {
                comments.Add(newComment);
                newCommentContent = string.Empty;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting comment: {ex.Message}");
        }
    }
}